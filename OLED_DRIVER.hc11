********************************************************************************
*               DRIVER code for SSD1306 OLED Display
*               Thomas Fuller: December 2024
* 
********************************************************************************
porta       equ     $1000
portd       equ     $1008
ddrd        equ     $1009

pactl       equ     $1026
tctl1       equ     $1020

reset       equ     %00100000               ; PORTA OR reset on turns just reset HIGH 
resetm      equ     %11011111               ; PORTA AND resetm turns just the reset pin LOW 

cs          equ     %10000000               ; PORTA OR cs turns just chip select HIGH 
csm         equ     %01111111               ; PORTA AND csm turns just the chip select LOW 

dc          equ     %01000000               ; PORTA OR dc means we are sending data (DC HIGH)
dcm         equ     %10111111               ; PORTA AND dcm means we are sending a command (DC LOW)

clk         equ     %00001000               ; PORTA OR clk means the clock is going high
clkm        equ     %11110111               ; PORTA AND clkm means the clock is going low

din         equ     %00010000               ; PORTA OR din means data in (to screen) is low
dinm        equ     %11101111               ; PORTA AND dinm means data to screen is HIGH

spi_send    rmb     1                       ; buffer to send our data out

*******************************************************************************
*       POWER ON SEQUENCE
*       Following 8.9 of the SSD1306 Docs, timing diagram 
*       Reset is pin B2 
*******************************************************************************

    ORG     $2000
reset_high:
    ldaa    #reset
    oraa    porta
    staa    porta
    rts

reset_low:
    ldaa    #resetm
    anda    porta
    staa    porta
    rts

cs_high:
    ldaa    #cs
    oraa    porta
    staa    porta
    rts

cs_low:
    ldaa    #csm
    anda    porta
    staa    porta
    rts

dc_high:
    ldaa    #dc
    oraa    porta
    staa    porta
    rts

dc_low:
    ldaa    #dcm
    anda    porta
    staa    porta
    rts

clk_high:
    ldaa    #clk
    oraa    portd
    staa    portd
    rts

clk_low:
    ldaa    #clkm
    anda    portd
    staa    portd
    rts

din_high:
    ldaa    #din
    oraa    porta
    staa    porta
    rts

din_low:
    ldaa    #dinm
    anda    porta
    staa    porta
    rts

*******************************************************************************
*       Subroutine to power on the screen and try to write data to it         *
*******************************************************************************
    ORG     $5200

    ldaa    #$80                ; PACTL needs to have bit 7 equal 1. 
    staa    pactl

    ldaa    clk                 ; configure port d clock pin as an output
    oraa    ddrd
    staa    ddrd

     

power_on:
    jsr     dc_high             ; set data/command line high to start
    jsr     cs_high             ; to power on the device, the initial states should be
    jsr     reset_high          ; reset should  start high, and cs should start high
    jsr     reset_low           ; toggle reset low, then high
    jsr     reset_high          ; ^^

*   Stuff we have to do before we send the message

    ldaa    #$af                ; data we want to send
    staa    spi_send            ; store data at the spi_send location

    jsr     cs_low              ; send message start
    jsr     dc_low              ; send a command
    jsr     spi_sb              ; send $af over

    ldaa    #$a4                ; a4 is command to follow the onboard vram turn whole screen on
    staa    spi_send            ; store $a4 to send it over
    jsr     spi_sb              ; just trying it why not

    ldaa    #$20                ; set addressing mode to horizontal
    staa    spi_send            ; this first command just lets the device know its time
    jsr     spi_sb

    ldaa    #$00                ; this command actually sets the horizontal mode
    staa    spi_send
    jsr     spi_sb

    ldaa    #$21                ; set column address
    staa    spi_send
    jsr     spi_sb

    ldaa    #0                 ; start column is the value in A
    staa    spi_send
    jsr     spi_sb

    ldaa    #127
    staa    spi_send            ; end column is the value in A
    jsr     spi_sb

    ldaa    #$22                ; set page address
    staa    spi_send            
    jsr     spi_sb

    ldaa    #0                  ; start page 0
    staa    spi_send            
    jsr     spi_sb

    ldaa    #7                  ; set end page
    staa    spi_send            
    jsr     spi_sb
    

    jsr     dc_high             ; done sending the command, high means data

    ldy     #$2000                ; load 8192 (hex 2000)  pixes is the whole thing bytes, to initialize the "shoot" subroutine
shoot:
    ldaa    #$00                ; this little subroutine is just to try to shoot data over
    staa    spi_send            ; in a pattern
    jsr     spi_sb
    dey
    bne     shoot

    jsr     dc_low              ; let the screen know we are sending commands
* long ass code just to get something running, then we collapse the prototype
* into subroutines
    ldaa    #$21                ; set column address
    staa    spi_send
    jsr     spi_sb

    ldaa    #0                 ; start column is the value in A
    staa    spi_send
    jsr     spi_sb

    ldaa    #127
    staa    spi_send            ; end column is the value in A
    jsr     spi_sb


    ldaa    #$22                ; set page address
    staa    spi_send            
    jsr     spi_sb

    ldaa    #6                  ; start page 0
    staa    spi_send            
    jsr     spi_sb

    ldaa    #7                  ; set end page
    staa    spi_send            
    jsr     spi_sb

    jsr     cs_high             ; just to mark the position
    jsr     cs_low              ; in the logic analyzer
    jsr     dc_high             ; we are sending data again

    ldy     #$08                ; a character is 8 bytes of pixel data
    ldx     #char_I              ; load the memory address of the letter h
    jsr     write_char

    ldy     #$08
    ldx     #char_sp
    jsr     write_char

    ldy     #$08
    ldx     #char_S
    jsr     write_char

    ldy     #$08
    ldx     #char_T
    jsr     write_char

    ldy     #$08
    ldx     #char_I
    jsr     write_char

    ldy     #$08
    ldx     #char_L
    jsr     write_char

    ldy     #$08
    ldx     #char_L
    jsr     write_char

    ldy     #$08
    ldx     #char_sp
    jsr     write_char

    ldy     #$08
    ldx     #char_L
    jsr     write_char

    ldy     #$08
    ldx     #char_I
    jsr     write_char

    ldy     #$08
    ldx     #char_K
    jsr     write_char

    ldy     #$08
    ldx     #char_E
    jsr     write_char

    ldy     #$08
    ldx     #char_sp
    jsr     write_char

    ldy     #$08
    ldx     #char_Y
    jsr     write_char

    ldy     #$08
    ldx     #char_O
    jsr     write_char

    ldy     #$08
    ldx     #char_U
    jsr     write_char

*    ldy     #$08
*    ldx     #char_Q
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_R
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_S
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_T
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_U
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_V
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_W
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_X
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_Y
*    jsr     write_char
*
*    ldy     #$08
*    ldx     #char_Z
*    jsr     write_char


    

*   Send message end
    jsr     dc_high             ; put dc back how we found it!
    jsr     cs_high             ; when we are done sending the message
    swi


*******************************************************************************
*           SEND BYTE OVER SPI PROTOCOL
*******************************************************************************
spi_sb:
    ldx     #$08                ; there are 8 bits in the byte stored at spi_send
    ldab    spi_send            ; the data we want to sent 
sb_loop:
    jsr     clk_low             ; clock low
    rolb                        ; look at the MSB
    bcs     dh                  ; set din high 
    bcc     dl                  ; set din low
dh:
    jsr     din_high
    bra     data_set
dl: 
    jsr     din_low
    bra     data_set
data_set:
    jsr     clk_high            ; then put the clock high
    dex                         ; decrement x
    bne     sb_loop             ; if we aren't on iteration 8, redo the loop

    rts                         ; spi_sb rts

*******************************************************************************
*       WRITE CHAR
*       There is probably a smarter way but for now we have to ldy with 8
*       then store the immediate value of the char we wnat
*       then call write_char
*       i.e. 
*******************************************************************************
write_char:
    ldaa    0,x 
    staa    spi_send
    pshx                        ; preserve x on the stack
    jsr     spi_sb              ; do your thing with a new x
    pulx                        ; get x back from the stack
    inx
    dey
    bne     write_char
    rts

*******************************************************************************
*           FONT DATA FOR BROCOLLI SANS
*           basicaly the labels char_A are pointers to the start of the font data
*******************************************************************************

    ORG     $6000

char_sp     FCB     $00,$00,$00,$00,$00,$00,$00,$00
char_A      FCB     $00,$fc,$12,$12,$12,$12,$fc,$00
char_B      FCB     $00,$fe,$92,$92,$92,$6c,$00,$00
char_C      FCB     $00,$fe,$82,$82,$82,$82,$82,$00
char_D      FCB     $00,$fe,$82,$82,$44,$38,$00,$00
char_E      FCB     $00,$fe,$92,$92,$92,$82,$82,$00   
char_F      FCB     $00,$fe,$12,$12,$12,$02,$00,$00
char_G      FCB     $00,$fc,$82,$82,$92,$92,$74,$00
char_H      FCB     $00,$fe,$10,$10,$10,$10,$fe,$00
char_I      FCB     $00,$82,$82,$fe,$82,$82,$00,$00
char_J      FCB     $00,$62,$82,$42,$3e,$02,$00,$00
char_K      FCB     $00,$fe,$10,$28,$44,$82,$00,$00
char_L      FCB     $00,$fe,$80,$80,$80,$80,$80,$00
char_M      FCB     $00,$fe,$04,$08,$08,$04,$fe,$00
char_N      FCB     $00,$fe,$04,$08,$10,$20,$fe,$00
char_O      FCB     $00,$fe,$82,$82,$82,$82,$fe,$00
char_P      FCB     $00,$fe,$12,$12,$12,$0c,$00,$00
char_Q      FCB     $00,$7c,$82,$92,$a2,$42,$bc,$00
char_R      FCB     $00,$fe,$12,$12,$32,$cc,$00,$00
char_S      FCB     $00,$9e,$92,$92,$92,$92,$f2,$00
char_T      FCB     $00,$02,$02,$fe,$02,$02,$00,$00 
char_U      FCB     $00,$fe,$80,$80,$80,$80,$fe,$00
char_V      FCB     $00,$3e,$40,$80,$40,$3e,$00,$00
char_W      FCB     $00,$fe,$40,$20,$20,$40,$fe,$00
char_X      FCB     $00,$c6,$28,$10,$28,$c6,$00,$00
char_Y      FCB     $00,$0e,$10,$f0,$10,$0e,$00,$00
char_Z      FCB     $00,$c2,$a2,$92,$8a,$86,$00,$00


